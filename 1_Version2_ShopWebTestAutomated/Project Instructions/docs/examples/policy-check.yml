name: PolicyCheck ‚Äî PR template compliance (custom)

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read

jobs:
  policy:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR against custom template
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const pr = context.payload.pull_request;
            if (!pr) core.setFailed('No pull_request payload.');

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = pr.number;

            const body = (pr.body || '').trim();
            const title = (pr.title || '').trim();
            const labels = (pr.labels || []).map(l => l.name);

            // Fetch requested reviewers (users/teams)
            const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({
              owner, repo, pull_number: number
            });

            const failures = [];

            // 1) Longitud m√≠nima del cuerpo
            const minLen = 300;
            if (body.length < minLen) {
              failures.push(`PR body demasiado corto: ${body.length}/${minLen} caracteres`);
            }

            // 2) Secciones esperadas seg√∫n TU plantilla
            //   (usamos regex tolerantes a emojis y variaciones)
            const mustHaveSections = [
              /##\s*‚úÖ?\s*Cumplimiento\s+de\s+pol[i√≠]ticas/i,
              /###\s*Reglas\s+tocadas/i,                                    // sub-bloque dentro de Cumplimiento
              /##\s*üîç?\s*Resumen\s+del\s+cambio/i,
              /##\s*üß™?\s*Plan\s+de\s+pruebas/i,
              /##\s*üìé?\s*Evidencias/i,
              /##\s*üö¶?\s*Quality\s+Gates/i,
              /##\s*üè∑Ô∏è?\s*Flaky\s*&\s*Quarantine/i,
              /##\s*üîí?\s*Seguridad/i,
              /##\s*‚ö†Ô∏è?\s*Riesgos/i,
              /##\s*üëÄ?\s*Review/i
            ];
            for (const rx of mustHaveSections) {
              if (!rx.test(body)) failures.push(`Falta secci√≥n obligatoria del template: ${rx}`);
            }

            // 3) Evidencias: Allure + run-metrics.json deben estar mencionados
            if (!/Allure/i.test(body)) {
              failures.push('Evidencias: falta referencia a Allure (enlace o artefacto).');
            }
            if (!/run-metrics\.json/i.test(body)) {
              failures.push('Evidencias: falta referencia a artifacts/run-metrics.json.');
            }

            // 4) Quality Gates: verificar tabla o al menos keywords (pass rate / p95)
            const hasQualityBlock = /Quality\s*Gates/i.test(body);
            const hasPassRate = /pass\s*rate/i.test(body);
            const hasP95 = /\bp95\b|\bp95DurationMs\b/i.test(body);
            if (!(hasQualityBlock && (hasPassRate || hasP95))) {
              failures.push('Quality Gates: falta bloque o claves (pass rate / p95).');
            }

            // 5) Flaky & Quarantine: exigir presencia del bloque para gestionar cuarentena
            if (!/Flaky\s*&\s*Quarantine/i.test(body)) {
              failures.push('Falta el bloque "Flaky & Quarantine".');
            }

            // 6) Seguridad: exigir declaraci√≥n/bloque
            if (!/##\s*üîí?\s*Seguridad/i.test(body)) {
              failures.push('Falta el bloque "Seguridad".');
            }

            // 7) Checklist t√©cnico dentro de "üëÄ Review"
            //    Verificamos los puntos distintivos de tu checklist
            const checklistExpect = [
              /CI\s*verde.*GateCheck/i,
              /0\s*`?Thread\.Sleep`?/i,
              /0\s*selectores\s+en\s+tests/i,
              /Allure\s*\+\s*`?run-metrics\.json`?/i,
              /Linters\/Analyzers\s*sin\s*warnings/i,
              /Docker\/compose/i
            ];
            for (const rx of checklistExpect) {
              if (!rx.test(body)) failures.push(`Checklist t√©cnico: falta punto '${rx}'.`);
            }

            // 8) (Opcional) Cobertura de categor√≠as ‚Äî Smoke/Regression/Negative/Edge/A11y/Visual
            //    Solo exigimos que el bloque exista (no que est√©n marcadas)
            const categoriesBlock = /(Smoke).*(Regression).*(Negative).*(Edge).*(A11y).*(Visual)/is;
            if (!categoriesBlock.test(body)) {
              failures.push('Falta el bloque de Cobertura de categor√≠as (Smoke/Regression/Negative/Edge/A11y/Visual).');
            }

            // 9) Labels y reviewers (m√≠nimos)
            if (!labels.length) failures.push('La PR debe tener al menos 1 label.');
            const hasReviewers = (reviewers.users?.length || 0) + (reviewers.teams?.length || 0) > 0;
            if (!hasReviewers) failures.push('Debes asignar al menos 1 reviewer (usuario o equipo).');

            if (failures.length) {
              core.setFailed('PolicyCheck fall√≥:\n- ' + failures.join('\n- '));
            } else {
              core.info('PolicyCheck OK ‚úì');
            }
